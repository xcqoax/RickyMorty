{"version":3,"sources":["Components/card/CardCharacters.js","Components/home/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["CardCharacters","props","person","useState","nombre","imagen","tipo","genero","especies","datosPersonajes","setDatosPersonajes","show","setShow","handleClose","handleClick","e","nombreChar","target","innerText","find","char","name","image","type","gender","species","Personajes","gql","useQuery","loading","error","data","Container","className","Spinner","animation","variant","resultado","characters","results","Row","map","personaje","Col","md","xs","Card","style","width","Img","src","Body","Button","onClick","Modal","onHide","Header","closeButton","Title","Footer","HomePage","state","inputName","handleChange","bind","this","setState","value","placeholder","onChange","Component","App","path","component","Boolean","window","location","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ab7fb439.chunk.js","sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport  Card  from 'react-bootstrap/Card'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport  Container  from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\n\r\nexport default function CardCharacters(props) {\r\n  const [ datosPersonajes, setDatosPersonajes ] = useState ({\r\n    nombre: '',\r\n    imagen:'',\r\n    tipo : '',\r\n    genero : '',\r\n    especies : ''\r\n  })\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  let person\r\n  let infoModal ={}\r\n \r\n  function handleClick(e){  \r\n  let nombreChar = e.target.innerText\r\n       person.find(char => {\r\n          if(char.name === nombreChar){\r\n                setDatosPersonajes({\r\n                  nombre: char.name,\r\n                  imagen: char.image,\r\n                  tipo : char.type,\r\n                  genero : char.gender,\r\n                  especies : char.species\r\n                })\r\n              }\r\n          })  \r\n          \r\n          handleShow()\r\n   };\r\n\r\n   \r\n  const Personajes = gql`\r\n        query{\r\n          characters (filter:{name:\"${props.name}\"}){\r\n            results{\r\n              name\r\n              image\r\n              type\r\n              gender\r\n              species\r\n            }\r\n          }        \r\n        }\r\n    `;\r\n\r\n\r\n        const { loading, error, data } = useQuery(Personajes)\r\n       \r\n        if (loading) return <Container><div className=\"row justify-content-center mt50\"><Spinner animation=\"border\" variant=\"primary\" /></div></Container>;\r\n        if (error) return  <p>Error</p>\r\n       \r\n        const resultado = data.characters.results;\r\n          person = resultado\r\n\r\n         return(\r\n           <div>\r\n             \r\n             <Container>\r\n               <Row >\r\n                {resultado.map(personaje =>(\r\n                  <Col md={4} xs={6}>\r\n                    <Card style={{ width: '18rem' }} className=\"mt-2\" >\r\n                      <Card.Img variant=\"top\" src={personaje.image} />\r\n                      <Card.Body className='btnInfo'>\r\n                        <Button onClick={handleClick} variant=\"outline-primary\" > {personaje.name} </Button>\r\n                      </Card.Body>  \r\n                    </Card>\r\n                 </Col> \r\n                ))}\r\n                \r\n               </Row>\r\n                                  \r\n                <Modal show={show} onHide={handleClose}>\r\n                  <Modal.Header closeButton>\r\n                    <Modal.Title>{datosPersonajes.nombre}</Modal.Title>\r\n                  </Modal.Header>\r\n                  <Modal.Body className=\"informacionGeneralPersonaje\">\r\n                    <img src={datosPersonajes.imagen} />\r\n                    <ul className=\"infoPersonaje\">\r\n                      <li> <strong>Especie:</strong> {datosPersonajes.especies} </li>\r\n                      <li> <strong>Genero:</strong> {datosPersonajes.genero} </li>  \r\n                      <li> <strong>Tipo:</strong> {datosPersonajes.tipo} </li>\r\n                    </ul>\r\n                  </Modal.Body>\r\n                  <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                      Close\r\n                    </Button>\r\n                  </Modal.Footer>\r\n                </Modal>\r\n\r\n             </Container>\r\n           </div>\r\n         );\r\n        \r\n       }\r\n       \r\n","import React, { Component } from 'react'\r\nimport CardCharacters from '../card/CardCharacters'\r\nimport  Container  from 'react-bootstrap/Container';\r\n\r\nclass HomePage extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n        inputName : ''\r\n        };\r\n\r\nthis.handleChange = this.handleChange.bind(this);\r\n}\r\n\r\nhandleChange(e){  \r\n    this.setState({\r\n        inputName: e.target.value\r\n    });\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n               \r\n                <div className=\"navPersonaje\">   \r\n                    <Container>\r\n                <input type=\"text\" placeholder=\"Escribe el personaje\" value={this.state.inputName} onChange={this.handleChange}/>\r\n                    </Container>\r\n                </div> \r\n                <CardCharacters name = {this.state.inputName}/>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport './App.css';\nimport HomePage from './Components/home/HomePage'\n\n\n\nexport default function App() {\n  return (\n    <Router>\n      <Route path=\"/\" component={HomePage} />\n    </Router>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client'\n\nimport { render } from 'react-dom'\n\nconst client = new ApolloClient({\n  uri:'https://rickandmortyapi.com/graphql',\n  cache: new InMemoryCache()\n})\n\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n/*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n**/"],"sourceRoot":""}